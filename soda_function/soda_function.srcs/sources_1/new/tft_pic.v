`timescale  1ns/1ns
module  tft_pic
(
    input   wire            tft_clk_33m  ,   // 输入时钟信号, 时钟频率33MHz
    input   wire            sys_rst_n   ,   // 系统复位信号, 低电平有效   
    input   wire    [10:0]   pix_x       ,   // 输入TFT显示器的横坐标
    input   wire    [10:0]   pix_y       ,   // 输入TFT显示器的纵坐标
    input   wire    [23:0]  data1   ,// 显示的数据1
    input   wire    [23:0]  data2   ,// 显示的数据2
	input   wire    [23:0]  data3   ,// 显示的数据3
    
    output reg      [15:0]  pix_data        // 输出TFT显示的像素数据

);

parameter   H_VALID =   10'd800 ,   // 水平有效显示区域宽度
            V_VALID =   10'd480 ;   // 垂直有效显示区域高度

parameter   CHAR_B_H=   10'd10,   // 字符起始水平位置
            CHAR_B_V=   10'd200 ;   // 字符起始垂直位置
/////////////////////////////// 字符位置参数
parameter   CHAR_B_H1=   10'd100,  // 字符起始水平位置
            CHAR_B_V1=   10'd200 ;   // 字符起始垂直位置          
/////////////////////////////// 显示位置参数
parameter   CHAR_B_H2=   10'd190,   // 字符起始水平位置
            CHAR_B_V2=   10'd200 ;   // 字符起始垂直位置  
            
parameter   CHAR_W  =   10'd16,   // 字符宽度
            CHAR_H  =   10'd32;   // 字符高度
          //  PIC_SIZE=14'd4096;

parameter   BLACK   =   16'h0000,   // 黑色
            WHITE   =   16'hFFFF,   // 白色
            GOLDEN  =   16'hFEC0;   // 金色                

reg     [511:0] char    [50:0]  ;   // 字符数据存储

    
always@(posedge tft_clk_33m)
    begin
        char[0]     <=  512'h00000000000000000000000003C006200C30181818181808300C300C300C300C300C300C300C300C300C300C1808181818180C30062003C00000000000000000;
        char[1]     <=  512'h000000000000000000000000008001801F800180018001800180018001800180018001800180018001800180018001800180018003C01FF80000000000000000;
        char[2]     <=  512'h00000000000000000000000007E008381018200C200C300C300C000C001800180030006000C0018003000200040408041004200C3FF83FF80000000000000000;
        char[3]     <=  512'h00000000000000000000000007C018603030301830183018001800180030006003C0007000180008000C000C300C300C30083018183007C00000000000000000;
        char[4]     <=  512'h0000000000000000000000000060006000E000E0016001600260046004600860086010603060206040607FFC0060006000600060006003FC0000000000000000;
        char[5]     <=  512'h0000000000000000000000000FFC0FFC10001000100010001000100013E0143018181008000C000C000C000C300C300C20182018183007C00000000000000000;
        char[6]     <=  512'h00000000000000000000000001E006180C180818180010001000300033E0363038183808300C300C300C300C300C180C18080C180E3003E00000000000000000;
        char[7]     <=  512'h0000000000000000000000001FFC1FFC100830102010202000200040004000400080008001000100010001000300030003000300030003000000000000000000;
        char[8]     <=  512'h00000000000000000000000007E00C301818300C300C300C380C38081E180F2007C018F030783038601C600C600C600C600C3018183007C00000000000000000;
        char[9]     <=  512'h00000000000000000000000007C01820301030186008600C600C600C600C600C701C302C186C0F8C000C0018001800103030306030C00F800000000000000000;
        char[10]    <=  512'h000000000000000000000000038003800380038004C004C004C004C00C4008600860086018201FF0103010301030201820182018601CF83E0000000000000000;
        char[11]    <=  512'h0000000000000000000000007FE018381818180C180C180C180C180C181818301FE01818180C180418061806180618061806180C18187FF00000000000000000;//B
        char[12]    <=  512'h00000000000000000000000000000000000000000000000000000000000000007FFE000000000000000000000000000000000000000000000000000000000000;//-
        char[13]    <=  512'h0000000000000000000000003FFC3184218641824182018001800180018001800180018001800180018001800180018001800180018007E00000000000000000;//T
        char[14]    <=  512'h000000000000000000000000000000000000000000000000000003C00C3008181808300C300C300C3FFC300030003000180418080E1803E00000000000000000;//e
        char[15]    <=  512'h0000000000000000000000000000000000000000000000002000EF3C71C6618661866186618661866186618661866186618661866186F3CF0000000000000000;//m
        char[16]    <=  512'h000000000000000000000000000000000000000000000000000009E07A301C181808180C180C180C180C180C180C180C18181C181E3019E01800180018007E00;//p
        char[17]    <=  512'h0000000000000000000000000000000000000000000000000000018003C003C001800000000000000000000000000000018003C003C001800000000000000000;//:
        char[18]    <=  512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018003C003C0018000000000000000000;//.
        char[19]    <=  512'h00000000000000000000000003E0061C080C180630023002300060006000600060006000600060006000600030023002100418080C1003E00000000000000000;//C
        
    end
     
always@(posedge tft_clk_33m or negedge sys_rst_n)
    if(sys_rst_n == 1'b0)
            pix_data    <= BLACK;
    else  begin
        if((pix_y>=CHAR_B_V)&&(pix_y<CHAR_B_V+CHAR_H))begin
            if((pix_x>=CHAR_B_H)&&(pix_x<CHAR_B_H+CHAR_W)                      
                &&(char[  data1/10%10][(CHAR_H+ CHAR_B_V- pix_y)* 16- ((pix_x - (CHAR_B_H-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN;
            else if((pix_x>=CHAR_B_H+CHAR_W)&&(pix_x<CHAR_B_H+CHAR_W*2)
                &&(char[  18][(CHAR_H+ CHAR_B_V- pix_y) * 16- ((pix_x - (CHAR_B_H-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN; 
            else if((pix_x>=CHAR_B_H+CHAR_W*2)&&(pix_x<CHAR_B_H+CHAR_W*3)
                &&(char[  data1%10][(CHAR_H+ CHAR_B_V- pix_y) * 16- ((pix_x - (CHAR_B_H-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN;   
			else if((pix_x>=CHAR_B_H1)&&(pix_x<CHAR_B_H1+CHAR_W)                      
                &&(char[  data2/10%10][(CHAR_H+ CHAR_B_V1- pix_y)* 16- ((pix_x - (CHAR_B_H1-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN;
             else if((pix_x>=CHAR_B_H1+CHAR_W)&&(pix_x<CHAR_B_H1+CHAR_W*2)                      
                &&(char[ 18][(CHAR_H+ CHAR_B_V1- pix_y)* 16- ((pix_x - (CHAR_B_H1-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN;
            else if((pix_x>=CHAR_B_H1+CHAR_W*2)&&(pix_x<CHAR_B_H1+CHAR_W*3)
                &&(char[  data2%10][(CHAR_H+ CHAR_B_V1- pix_y) * 16- ((pix_x - (CHAR_B_H1-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN; 
			else if((pix_x>=CHAR_B_H2)&&(pix_x<CHAR_B_H2+CHAR_W)                      
                &&(char[  data3/10%10][(CHAR_H+ CHAR_B_V2- pix_y)* 16- ((pix_x - (CHAR_B_H2-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN;
            else if((pix_x>=CHAR_B_H2+CHAR_W)&&(pix_x<CHAR_B_H2+CHAR_W*2)                      
                &&(char[ 18][(CHAR_H+ CHAR_B_V2- pix_y)* 16- ((pix_x - (CHAR_B_H2-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN;
            else if((pix_x>=CHAR_B_H2+CHAR_W*2)&&(pix_x<CHAR_B_H2+CHAR_W*3)
                &&(char[  data3%10][(CHAR_H+ CHAR_B_V2- pix_y) * 16- ((pix_x - (CHAR_B_H2-1'b1)) % 16) - 11'd1])
              )
                pix_data    <=GOLDEN; 
                
             else
                        pix_data    <= BLACK;
        end else
     
            pix_data    <= BLACK;
     end
endmodule
